%YAML 1.2
---
# See http://www.sublimetext.com/docs/3/syntax.html
name: GSQL
file_extensions:
  - gsql
scope: source.gsql
contexts:
  main:
    # Strings begin and end with quotes, and use backslashes as an escape
    # character
    - match: '"'
      scope: punctuation.definition.string.begin.example-c
      push: double_quoted_string

    # Comments begin with a '//' and finish at the end of the line

    - match: '\b(?i)(accum|bag|compress|define|directed|distributed|drop|edge|filename|for|foreach)\b'
      scope: keyword.control.all

    - match: '\b(?i)(from|gen-data|graph|header|install|job|list|loading|map|post\-accum|primary_id)\b'
      scope: keyword.control.all

    - match: '\b(?i)(print|query|quote|return|returns|reverse_edge|run|schema_change|select)\b'
      scope: keyword.control.all

    - match: '\b(?i)(separator|set|stats|temp_table|to|total_instance|tuple|typedef|undirected|use)\b'
      scope: keyword.control.all

    - match: '\b(?i)(user_defined_header|using|values|vertex|where|with|USE GRAPH)\b'
      scope: keyword.control.all

    - match: '\b(?i)(DEFINE|CREATE LOADING JOB|FOR GRAPH|DEFINE FILENAME|LOAD|FROM|TO|VERTEX|EDGE|VALUES_USING|USING)\b'
      scope: keyword.control.all

    - match: '\b(?i)(order by|interpret|limit)\b'
      scope: keyword.sql

 
    - match: '\b(?i)(SumAccum|MinAccum|MaxAccum|AvgAccum|AndAccum|OrAccum|BitwiseAndAccum|BitwiseOrAccum|ListAccum|SetAccum|BagAccum|MapAccum|ArrayAccum|HeapAccum|GroupByAccum)\b'
      scope: entity.name.function

    - match: '\b(?i)(int|string|float|numeric|uint|double|bool|string compress|datetime|fixed_binary)\b'
      scope: storage.type

    - match: '(\[|\]|\{|\}|\(|\))'
      scope: entity.name.function

    - match: "#"
      scope: punctuation.definition.comment.sql
      push:
        - meta_scope: comment.line.number-sign.sql
        - match: \n
          pop: true
      

    # Keywords are if, else for and while.
    # Note that blackslashes don't need to be escaped within single quoted
    # strings in YAML. When using single quoted strings, only single quotes
    # need to be escaped: this is done by using two single quotes next to each
    # other.
    - match: '\b(?i)(if|else|for|while|case|then|when|case when|begin|end|end case`)\b'
      scope: constant.language

    - match: '\b(?i)(false|null|true)\b'
      scope: constant.numeric

    # Numbers
    - match: '\b(-)?[0-9.]+\b'
      scope: constant.numeric

  double_quoted_string:
    - meta_scope: string.quoted.double.example-c
    - match: '\\.'
      scope: constant.character.escape.example-c
    - match: '"'
      scope: punctuation.definition.string.end.example-c
      pop: true

 

